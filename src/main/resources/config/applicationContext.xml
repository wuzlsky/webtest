<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 1. 引入配置文件-->
	<bean id="configBean" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations">
	 	 	<array>
	 	 		<value>classpath:config/jdbc.properties</value>
	 	 	</array>
	 	 </property>
	</bean> 
		
	 <!-- 2. 数据库配置      创建 c3p0 数据库连接 -->
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="acquireIncrement" value="2"></property>
		<property name="initialPoolSize" value="10"></property>
		<property name="minPoolSize" value="5"></property>
		<property name="maxPoolSize" value="20"></property>
		<property name="idleConnectionTestPeriod" value="20"></property>
		<property name="maxIdleTime" value="120"></property>
		<!--  
			idleConnectionTestPeriod：隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查； 
			maxIdleTime：最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0S
		-->
	</bean>

	<!-- 3.配置sqlSessionFactory 引入mybatis -->
	<!-- 3.配置sqlSessionFactory 引入mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation" value="classpath:config/mybatis-config.xml" />  
    </bean> 
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">   
          <constructor-arg index="0" ref="sqlSessionFactory" />   
    </bean> 
  
	
	<!-- 4.事务管理器 ，配置数据源，使用JDBC控制类-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<!-- 5.配置声明式事务  -->
	<!-- spring提供了声明式事务管理，这是通过spring aop（面向切片编程）实现的， 
		   为普通java类封装事务控制，它是通过动态代理实现的，由于接口是延迟实例化的，
		 spring在这段时间内通过拦截器，加载事务切片.
	 -->

	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
	    <tx:method name="save*" propagation="REQUIRED"/>
	    <tx:method name="insert*" propagation="REQUIRED"/>
	    <tx:method name="update*" propagation="REQUIRED"/>
	    <tx:method name="delete*" propagation="REQUIRED"/>
	    <tx:method name="query*" propagation="REQUIRED"/>
	    <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
	    <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="tpointcut" expression="execution(* com.wuzl.test.base.service.impl.*.*(..)) or execution(* com.wuzl.test.service.impl.*.*(..))" />
		<aop:advisor advice-ref="advice" pointcut-ref="tpointcut"/>
	</aop:config>
	
</beans>	
	 
		
	
	